  FILE      filedups;                      { to read result of duplicates for HOUSEHOLDs, INDIVIDUALs and biomarkers }
  
  array string TeamShare(20,3);            { use to select team members to transfer data }
  
  { initialize the array with application names for 1-Entry and 2-Superv carpets }
  array string applications(25,2) = 
    "ChkHHDup",  "1",
    "CollectHH", "1",
    "CollectIN", "1",
    "DCMenu",    "1",
    "FixResult", "1",
    "ListElig",  "1",
    "ListNotes", "1",
    "LstQuest",  "1",
    "maphh",     "1",
    "Pilot1",    "1",
    "WrkElig",   "1",
    "SupMenu",   "2", 
    "AssignHH",  "2", 
    "Tentry",    "2", 
    "Sentry",    "2",
    "SelectHH",  "2", 
    "ChkINDup",  "2", 
    "CheckID",   "2"
    "",   " "
    "",   " "
    "",   " "
    "",   " "
    "",   " "
    "",   " "
    "",   " "
    ; 

  function viewtext (string tfname);
    FILE TXTFILE;
    string fline;
    setfile(TXTFILE, tfname, update);
    { set the name for the HTML file }
    HTML_InitAlign();
    HTMLname = "viewtext.html";
    if FileExist( HTMLname ) then
      FileDelete( HTMLname )
    endif;
    setfile( HTMLFile, HTMLname, create );

    HTML_ParagraphS(tfname);
    while TXTFILE.read(fline) do
      HTML_Paragraph(fline)
    enddo;
    HTML_End();

    TXTFILE.close();
    HTMLFile.close();
    view( "file://" + pathname(application) + HTMLName );
  end;
  //Splits a string delimited by 'splitChar' into a list of substrings 'Spl'
  //Returns count of split strings
  function Split(string input, alpha(1) splitChar, list string Spl, optional maxCount = 0)
    Spl.Clear();
    string gv_line;
    numeric gv_p = pos(splitChar, input);
	while gv_p & (!maxCount | Spl.Length() < maxCount - 1) do
	  Spl.Add(input[1:gv_p - 1]);
	  input = input[gv_p + 1:length(strip(input)) - gv_p];
	  gv_p = pos(splitChar, input);
    enddo;
	Spl.Add(input);
	
	Split = Spl.Length();
  end;
  function string HTML_Button (string str_CallBack, string str_Text);
    HTML_Button = maketext('<button onclick="%s">%s</button>', encode(str_CallBack), str_Text);
  end;
  function FindDups (list string wdir, string str_cluster, checktype, numeric autodelete = 0);
    set trace(on);
    // looks for duplicate cases in hh or ind files across list of folders
    // parms: wdir -list of folders to check
    //        str_cluster - cluster number to check, use * for all clusters
    //        checktype - 1 : hh 2: INDIVIDUAL
    //        autodelete : if set to 1 function will delete 1st dup case in pair and not display msgs
    //                      use this flag when running fct tables from reeive
    hashmap case_ids default(0);
    list string filelisting;
    list string templist;
    list string caseidlist;
    string msgtext;
    string partialcase;
    numeric ctr, fctr, dres;
    numeric dupfound = 0;

    { set the name for the HTML file }
    HTML_InitAlign();
    HTMLname = "DupReport.html";
    if FileExist( HTMLname ) then
      FileDelete( HTMLname )
    endif;
    setfile( HTMLFile, HTMLname, create );

    { initialize the report headings }
    zstring1 = MakeText( tr("Duplicate cases report"), zcluster );
    CellValues(1) = tr("Household");
    CellValues(2) = tr("Line");
    CellValues(3) = tr("Name");
    CellValues(4) = tr("Interviewer");
    CellValues(5) = tr("Status");
    CellValues(6) = tr("Fichier");

  { specify columns that are left aligned, strings are left aligned }
  CellAlign(1) = 4;
  CellAlign(2) = 5;

   // !! adding application specific javascript to html output
   list string js_scripts;
   js_scripts.add("../Library/checkid.js");
   HTML_Header( CellAlign, zstring1, js_scripts );  // generates a general HTML header

   if checktype = 1 then
     HTML_BeginTable( CellValues, maketext("%s %s", tr( "Duplicated cases"), tr( "Household" ) ), 6, "Main" );  // generates the HTML table script with the column headers
   else
     HTML_BeginTable( CellValues, maketext("%s %s", tr( "Duplicated cases"), tr( "Individuals" ) ), 6, "Main" );  // generates the HTML table script with the column headers
   endif;

    // create list of files to check
    do ctr = 1 while ctr <= wdir.length()
      dirlist(templist, wdir(ctr) , "HI"[checktype:1] + str_cluster + "????.DAT");
      filelisting.add(templist);
      // delete index files in case are out of date
    enddo;
    filelisting.sort();
    // loop through files
    do fctr = 1 while fctr <= fileListing.length()
    // delete any index files in case they are out of sync
      FileDelete(fileListing(fctr) + ".csidx");
      if checktype = 1 then
        SetFile(CGHH80, fileListing(fctr), update);
        keylist(CGHH80, caseidlist);
        do ctr = 1 while ctr <= caseidlist.length()
          inc( case_ids(caseidlist(ctr) ));
        enddo;
        close(CGHH80);
      else
        SetFile(CGIN80, fileListing(fctr), update);
        keylist(CGIN80, caseidlist);
        do ctr = 1 while ctr <= caseidlist.length()
          inc( case_ids(caseidlist(ctr) ));
        enddo;
        close(CGIN80);
      endif;
    enddo;
    caseidlist.clear();
    // check ids in hashmap
    case_ids.getkeys(caseidlist);
    do ctr = 1 while ctr <= caseidlist.length()
      // errmsg("%s : %d", caseidlist(ctr), case_ids(caseidlist(ctr)) );
      if case_ids(caseidlist(ctr)) > 1 then
        dupfound = 1;
        do fctr = 1 while fctr <= fileListing.length()
          if checktype = 1 then
            SetFile(CGHH80, fileListing(fctr), update);
            if loadcase(CGHH80, caseidlist(ctr) ) then
              CellValues(1) = caseidlist(ctr)[5:4];
              CellValues(2) = "BLANK";
              CellValues(3) = "BLANK";
              CellValues(4) = edit("9999", QHINTNUM);
              if partialcs( 1, QHCLUST, QHNUMBER, 0, fileListing(fctr)  ) then
                CellValues(5) = tr( "Partial" )
              else
                CellValues(5) = getlabel(QHRESULT, QHRESULT);
              endif;
              CellValues(6) = HTML_Button(maketext("Return_Case_ID('%04d%04d,%s')", QHCLUST, QHNUMBER, path.GetFileName( fileListing(fctr) )), utf_view_icon) + " " + path.getRelativePath( pathname(application),  fileListing(fctr));

              HTML_OneRow( CellValues, 6 );  // generates the HTML script for a row with relevant individual data
              // HTMLFile.write ( maketext("Case created by interviewer %4d, Result =%s (%1d) %s\n File:%s\n ", QHINTNUM, getlabel(QHRESULT, QHRESULT), QHRESULT, partialcase, fileListing(fctr)) );
              if autodelete then
                dres= delcase(CGHH80, caseidlist(ctr));
                // errmsg("dres=%d, fname=%s, case=%s", dres, fileListing(fctr), caseidlist(ctr));
              endif;
            endif;
            close(CGHH80);
          else
            SetFile(CGIN80, fileListing(fctr), update);
            if loadcase(CGIN80, caseidlist(ctr) ) then
              // if ckpartial(caseidlist(ctr), fileListing(fctr)) then
              if partialcs( 2, QCLUSTER, QNUMBER, QLINE, fileListing(fctr)  ) then
                partialcase = tr( "Partial" )
              else
                partialcase = tr( "Complete" )
              endif;
              CellValues(1) = caseidlist(ctr)[5:4];
              CellValues(2) = caseidlist(ctr)[9:2];
              CellValues(3) = QNAME;
              CellValues(4) = edit("9999", QINTNUM);
              if partialcs( 2, QCLUSTER, QNUMBER, QLINE, fileListing(fctr)  ) then
                CellValues(5) = tr( "Partial" )
              else
                CellValues(5) = getlabel(QRESULT, QRESULT);
              endif;
              CellValues(6) = HTML_Button(maketext("Return_Case_ID('%04d%04d%02d,%s')", QCLUSTER, QNUMBER, QLINE, path.GetFileName( fileListing(fctr) )), utf_view_icon) + " " + path.getRelativePath( pathname(application),  fileListing(fctr));
              HTML_OneRow( CellValues, 6 );  // generates the HTML script for a row with relevant individual data
              if autodelete then
                dres = delcase(CGIN80, caseidlist(ctr));
                // errmsg("dres=%d, fname=%s, case=%s", dres, fileListing(fctr), caseidlist(ctr));
              endif;
            endif;
            close(CGIN80);
          endif;
        enddo;
      endif;
    enddo;
    HTML_EndTable();
    HTML_Paragraph( " " );
    HTML_Paragraph( " " );
    HTML_Paragraph( HTML_Button("Return_Case_ID('')", tr("OK")));
    HTML_ParagraphS( tr("Please resolve the duplicated cases listed above before continuing") );
    HTML_End();
    if !autodelete & dupfound then
      // !! display form and handle requests to view questionnaires
      // set up display options
      string display_options = maketext('{ "width": %d, '
                                        '  "height": %d, '
                                                                        '  "resizable": %d }'
                                                                        , int(tonumber(getproperty("MaxDisplayWidth")) * 0.9)
                                                                        , int(tonumber(getproperty("MaxDisplayHeight")) * 0.9)
                                                                        , true);
       // loop until no qres selected by user 
       #if exists(QHCSPRO8)
       while true do 
         // show html dialog form
         string str_received = CS.UI.showDialog(path := Path.Concat(Application, HTMLName), displayOptions := @object display_options);
         str_received = replace(str_received, '"', ''); // remove quotes from string returned by HTML dialog
         if length( str_received ) then
           list string Spl;
           split(str_received, ",", Spl);
           string caseid = spl(1);
           string fname = "../PII/receive/" + spl(2);
           // check if a valid caseid was returned if so view the case otherwise quit
           if checktype = 1 then 
             setfile(CGHH80, fname, update);
             loadcase(CGHH80, caseid);
             ViewQre("CGHH80", "../Entry/CGHH80.fmf", "../Entry/CollectHH.qsf");
           else
             setfile(CGIN80, fname, update);
             loadcase(CGIN80, caseid);
             ViewQre("CGIN80", "../Entry/CGIN80.fmf", "../Entry/CollectIN.qsf");
           endif;
         else
           break;
         endif;
       enddo;
       #else
         view(HTMLName);
       #endif
    endif;
    FindDups = dupfound;  
  end;
  function string ShowPubDate();
    // message to show publish date of pen file  excluding seconds
    errmsg("Version: %0d", publishdate()/100 );
  end;

  function SetBTId(string bt_id)
    string WorkDir="/storage/emulated/0/ICF_Utility"; {On the tablet the root for the file}
    if GetOS() in 20:29 then
      if !direxist(WorkDir) then  
        dircreate(WorkDir);
      endif;
      file myfile;
      setfile(myfile,strip(WorkDir)+strip("/Utility.xml"),create);
      filewrite(myfile,strip('<?xml version="1.0" encoding="utf-8"?>'));
      filewrite(myfile,"<Utility>");
      filewrite(myfile,concat("<Action>","n","</Action>"));
      filewrite(myfile,concat("<Nameing>",strip(bt_id) ,"</Nameing>"));
      filewrite(myfile,"<Location>location</Location>");
      filewrite(myfile,strip("</Utility>"));
      close(myfile);   
      SetBTId = execsystem("app:com.utility",normal ,nofocus,wait ); 
      endif;
  end; 
  function checkBTId (wcode);
    if getbluetoothname() <> edit("9999",wcode ) then
      setbluetoothname(edit("9999", wcode));
    endif;
  end;

  function getversion ();
    errmsg("Ver: %d", int( publishdate()/100 ));
  end;

  function CleanIndex (string wdir);
    // deletes index files in a specified folder
    FileDelete(wdir + "\*.csidx");
    FileDelete(wdir + "\*.*.csidx");
  end;
  function fixdata (string infilename, ftype);
    // remove blank lines and lines with corrupted data including invalid record identifiers
    // and cases with invalid ids
    list string valrecsHH = "H00","H1X","H01","H02","H03","H4A","H04","H05","H06","B00","B01","B02","B03";
    list string valrecsIN = "W00","W01","W2A","W2B","W2Y","W2C","W2D","W3A","W3B","W3C","W04","W05","W6A","W6B",
                            "WEC","W07","W08","W09","W10","W11","WCD","WG1","WG2","WDV","M01","M02","M3A","M3B",
                            "M04","M05","M06","M07","M08","MCD","MGC","MDV";
    FILE inTxt;
    FILE outTxt;
    string fline;
    numeric recordpos;
    numeric lncount = 0;
    if ftype = 1 then
      recordpos = 9
    else
      recordpos = 11; 
    endif;
    setfile(inTxt, infilename, update);
    setfile(outTxt, infilename + ".txt", create);
    numeric isok = 0;
    while FileRead(inTxt, fline) do 
      inc(lncount);
      isok = tonumber(fline[1:recordpos-1]) & ( ftype = 1 & 
        valrecsHH.seek(fline[recordpos:3]) | ftype = 2 & valrecsIN.seek(fline[recordpos:3]) );
      if isok then
        FileWrite(outTxt, fline);
      endif;
    enddo;
    close(inTxt);
    close(outTxt);
    FileCopy(outTxt, inTxt);
    FileDelete(outTxt);
  end;
  function string getver (string filepath);
    // get version from version.txt file
    FILE version;
    list string version_txt;
    setfile(version, filepath, update);
    if FileRead(version, version_txt) then
      getver = version_txt(1);
    else
      getver = "0";
    endif;
    close(version);
  end;
  function DisplayFile (string FileToDisplay);
    if FileExist(FileToDisplay) then
      view(FileToDisplay)
    else
      errmsg("Fichier pas disponible a ce moment");
    endif;
  end;
  function ShowQrePDf (string DispPath);
    numeric x =  accept(tr("Questionnaire"), 
           "Ménage",
           "Femme",
           "Biomarqueur"
           );
    when x;
         1 -> DisplayFile(DispPath + "/Menage.pdf");
         2 -> DisplayFile(DispPath + "/Femme.pdf");
         3 -> DisplayFile(DispPath + "/Biomarqeur.pdf");
    endwhen;
  end;
  function FileChanged (string filetocheck);
    // uses md5 checksum to determine if a file has changed
    // return values: 0: not changed 1: changed 2: new file
    // requires MD5 file to have been opened prior to calling the function
    numeric md5res = 0;
    string file_path = strip(filetocheck);
    string MD5_Value = diagnostics("md5",file_path); // generate md5 hash for the file
    if FileExist(filetocheck) then // check file exists first !!!
      open(MD5);
      FILE_NAME = file_path; // get file name for lookup
      numeric found = loadcase(MD5,FILE_NAME);        // look up file in md5 database
      if !found then  // new file
        md5res = 2;
      elseif MD5CODE <> MD5_Value then  // existing file but changed
        md5res = 1;
      else                             // existing file, not changed
        md5res = 0;
      endif;
      if md5res then // if changed/new we update the MD5 database
        MD5CODE= MD5_Value ;
        writecase(MD5);
      endif;
      close(MD5);
    endif;
    FileChanged = md5res;
  end;
  function SmartPut (string str_dir, string str_mask, string str_dest, isrecursive = 0 );
    // used to only PUT changed files when syncing
    // assumes current connection to a sync server
    // works over Bluetooth or CSWEb
    // note that the destination folder must exist on the server otherwise the transfer
    // will fail
    list string filestocheck;
    dirlist(filestocheck, str_dir, filter:=str_mask, recursive:=isrecursive);
    // filestocheck.show();
    // check if files changed
    do numeric f = filestocheck.length() while f > 0 by (-1)
       if !FileChanged(filestocheck(f)) then
         filestocheck.remove(f); // remove files that didn't change
       endif;
    enddo;
    // sync changed files
    // !! NOTE this assumes a connection to the server has been already made
    do numeric f = 1 until f > filestocheck.length()
      SmartPut = SyncFile( PUT, filestocheck(f), str_dest + "/" + path.GetFileName(filestocheck(f)))
    enddo;
  end;
