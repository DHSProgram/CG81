{Application 'SAMPLIST' }
PROC GLOBAL
{------------------------------------------------------------------------------------------}
{                                                                                          }
{ If GPS coordinates are collected at cluster level, change the strings {+GPS} and {GPS+}  }
{ by {{GPS} {GPS}} to disable the capture of coordinates at household level.  If that is   }
{ the case it is also necessary to use the correct form "HH Listing - No GPS.fmf" as well  }
{ as to remove the GPS.fmf from the ENT application definition file.  It is also necessary }
{ to disable the GPS strings in function HouseHoldList() in application SampMenu as well   }
{ as in aplication ListHH and all applications used by the central office                  }
{                                                                                          }
{------------------------------------------------------------------------------------------}

  numeric debug = 1;
  numeric xcluster, xintnum, n, i, j, nentry, pct30, entries, selseg, hhsegment,segmendone;
  numeric oldhhnum, oldstruct, oldhhinst, x, android;
  numeric wstruct, whouseh;
  numeric rowto; // variable to control movement to specific household in roster !!!
  string  gpstitle;
  string txtcompare; // used to show text of description and head of household
  numeric wocc;
  string weipc;
  alpha(1)   type;
  numeric listidx; // index for qc comparison file !!!
  numeric waccuracy;

  valueset string modvs;  // modify valuesets fo LINTRO
  valueset modGPSvs;  // modify valuesets for LINTGPS

  { store original values from LINTRO variable }
  array alpha(1) origval(500);
  
  { get the application published date to dispay in menus }
  function GetPubDate();
    numeric zstamp, zdate, ztime;
    if getos() = 20 then
      errmsg("Version:%d", int( publishdate()/100 ) ) ;
    else
      zstamp = filetime( pathname(application) + "SampList.apc" );
      zdate = sysdate("YYYYMMDD", zstamp);
      ztime = systime("HHMM", zstamp);
      errmsg ( maketext(tr("Version: Date %d Time %d"), zdate, ztime) );
    endif;  
  end;
  array string listing(300,9);
  function ph_array();
    do i = 1 while i <= maxocc(RECORD2000);
	  if visualvalue( LTRUEHH(i) ) = notappl then
	    break
	  else
	    listing(i,1) = maketext( "%2d", visualvalue( LTRUEHH (i) ) );
	    listing(i,2) = maketext( "%2d", visualvalue( LNUMBER (i) ) );
	    listing(i,3) = maketext( "%2d", visualvalue( LSTRUCT (i) ) );
	    listing(i,4) = maketext( "%2d", visualvalue( LHOUSEH (i) ) );
	    listing(i,5) =                               LNAME   (i)    ;
	    listing(i,6) =                               LADDRESS(i)    ;
	    listing(i,7) = maketext( "%4.6f %1s- %4.6f %1s", visualvalue( LLATITUDE(i) ), LLATPOLE(i) , visualvalue( LLONGITUDE (i) ), LLNGPOLE (i));
          endif;
	enddo;
        ph_array = showarray(tr("Households"), listing, 
        title(tr("True"), tr("Num Seq."), tr("Struct."), tr("Unit"), tr("Name"), tr("Address"), tr("GPS")) 
        );
        listing.clear();
  end;

  function showmap ();
    // Declare a map
    map hhmap;
    numeric markerId;

    do i = 1 until i > noccurs(RECORD2)
      if LLATITUDE(i) & LLONGITUDE(i) then
        markerId = hhmap.addMarker(LLATITUDE(i), LLONGITUDE(i));
        hhmap.setMarkerText(markerId, maketext("%03d-%02d", LSTRUCT(i), LHOUSEH(i)));
        hhmap.setMarkerDescription(markerId, maketext("%03v-%02v", LADDRESS(i), LNAME(i)));
      endif;
	  hhmap.zoomTo(LLATITUDE(i), LLONGITUDE(i), 10); 
    enddo;
    hhmap.show();
	
  end;

function DisplayMap()
  //Afficher les coordonnées sur Maps.Me ou GoogleEarth
  FILE mapfile;
  string fnmapfile = pathconcat(PathName(Application),concat("CARTO",edit("9999",LCLUSTER),".kml"));
  numeric wlong, wlat;
  Setfile(mapfile,fnmapfile,create);
  // filecreate(pathconcat(PathName(Application),"CARTO",concat(edit("9999",LCLUSTER),".kml")));
  Filewrite(mapfile,'<?xml version="1.0" encoding="UTF-8"?>');
  Filewrite(mapfile,'<kml xmlns="http://earth.google.com/kml/2.0">');
  Filewrite(mapfile,'<Document>');
  //each point
  for i in RECORD2 do
    wlong = visualvalue(LLONGITUDE);
    wlat  = visualvalue(LLATITUDE);
    weipc =  maketext("%04d/%03d/%02d", LCLUSTER, visualvalue(LSTRUCT), visualvalue(LHOUSEH));
    if wlong <> notappl & wlat <> notappl then
      filewrite(mapfile,'<Placemark>');
      filewrite(mapfile,'<Point>');
      filewrite(mapfile,"<coordinates>%5.6f,%5.6f,%5.6f. </coordinates>", wlong, wlat, 0);
      filewrite(mapfile,'</Point>');
      filewrite(mapfile,'<Name>');
      filewrite(mapfile, weipc);
      filewrite(mapfile,'</Name>');
      filewrite(mapfile,'<Description>');
      filewrite(mapfile, LADDRESS);
      filewrite(mapfile,'</Description>');
      filewrite(mapfile,"</Placemark>");
    endif;
  enddo;
  filewrite(mapfile,'</Document>');
  filewrite(mapfile,'</kml>'); 
  close(mapfile);
  if getos() = 20 then
    execsystem("view:" + fnmapfile);
  elseif getos() = 10 then
    view(fnmapfile);
  endif;
end;

function mapView()
If getos()=10 then
numeric mapEngine_choice = accept("Type de moteur cartographique", "Google Earth", "CSProMap"); 

if mapEngine_choice = 1 then 
    DisplayMap(); 

elseif mapEngine_choice = 2 then 
    showmap (); 
endif;
else
showmap (); 
endif;

end
  { setup basic user bar }
  function userbase();
    userbar( clear );
    userbar( add button, "<",    do("PreviousField") );
    userbar( add button, ">",    do("NextField") );
    userbar( add button, ">>|",  do("AdvanceToEnd") );
    userbar( add button, "Note", do("EditNote") );
    userbar( add button, "Lang", do("ChangeLanguage") );
    userbar( add button, "Ver",  GetPubDate() );
    userbar( add button, tr( "Households" ),  ph_array() );
    userbar( add button, tr( "Map" ),  mapView());
  end;

  { set value sets based on language }
  function OnChangeLanguage()
    SetLanguage( getlanguage() );
    savesetting("Language", getlanguage());
 end;

  { function used to delete one household from the listing }
  function deletentry( xrow, alpha(1) oldintro )
    do i = xrow while i < nentry
      { correct when the row is the first of a structure and the following is a household within the structure }
      if i = xrow & oldintro = "1" & LINTRO(i+1) = "2" then
        LINTRO(i+1) = "1";
        origval(i+1) = "1";
      endif;
      LINTRO(i)     = LINTRO(i+1);
      LSTRUCTT(i)   = visualvalue( LSTRUCTT(i+1) );
      LINFRAS(i)   = visualvalue( LINFRAS(i+1) );
      LTRUEHH(i)    = visualvalue( LTRUEHH(i+1) );
      LSTYPE(i)    = visualvalue( LSTYPE(i+1) );
      LNUMBER(i)    = visualvalue( LNUMBER(i+1) );
      LSTRUCT(i)    = visualvalue( LSTRUCT(i+1) );
      LHOUSEH(i)    = visualvalue( LHOUSEH(i+1) );
      LNAME(i)      = LNAME(i+1);
      LADDRESS(i)   = LADDRESS(i+1);
      LNOTES(i)     = LNOTES(i+1);
      LINTGPS(i)    = visualvalue( LINTGPS(i+1) );
      LLATITUDE(i)  = visualvalue( LLATITUDE(i+1) );
      LLATPOLE(i)   = LLATPOLE(i+1);
      LLONGITUDE(i) = visualvalue( LLONGITUDE(i+1) );
      LLNGPOLE(i)   = LLNGPOLE(i+1);
      LPHONE1(i)    = LPHONE1(i+1);

      LACCURACY     = visualvalue( LACCURACY     (i+1) ); 
      { update the array with original values in the LINTRO variable }
      origval(i)    = origval(i+1);
    enddo;
    LINTRO(i)     = " ";
    LSTRUCTT(i)   = notappl;
    LINFRAS(i)   = notappl;
    LTRUEHH(i)    = notappl;
    LSTYPE(i)     = notappl;
    LNUMBER(i)    = notappl;
    LSTRUCT(i)    = notappl;
    LHOUSEH(i)    = notappl;
    LNAME(i)      = " ";
    LADDRESS(i)   = " ";
    LINTGPS(i)    = notappl;
    LNOTES(i)     = " ";
    LLATITUDE(i)  = notappl;
    LLATPOLE(i)   = " ";
    LLONGITUDE(i) = notappl;
    LLNGPOLE(i)   = " ";
    LPHONE1(i)  = " ";

    LACCURACY(i)  = notappl;
    origval(i)    = " ";
    nentry        = nentry - 1;       { one entry eliminated }
  end;

  { function used to insert an entry (structure/household) }
  function insertentry( xrow, alpha(1) xtype )
    do i = nentry while i >= xrow by -1
      LINTRO(i+1)     = LINTRO(i);
      LSTRUCTT(i+1)   = visualvalue( LSTRUCTT(i) );
      LINFRAS(i+1)   = visualvalue( LINFRAS(i) );
      LTRUEHH(i+1)    = visualvalue( LTRUEHH(i) );
      LSTYPE(i+1)     = visualvalue( LSTYPE(i) );
      LNUMBER(i+1)    = visualvalue( LNUMBER(i) );
      LSTRUCT(i+1)    = visualvalue( LSTRUCT(i) );
      LHOUSEH(i+1)    = visualvalue( LHOUSEH(i) );
      LNAME(i+1)      = LNAME(i);
      LADDRESS(i+1)   = LADDRESS(i);
      LNOTES(i+1)     = LNOTES(i);
      LINTGPS(i+1)    = visualvalue( LINTGPS(i) );
      LLATITUDE(i+1)  = visualvalue( LLATITUDE(i) );
      LLATPOLE(i+1)   = LLATPOLE(i);
      LLONGITUDE(i+1) = visualvalue( LLONGITUDE(i) );
      LLNGPOLE(i+1)   = LLNGPOLE(i);
      LPHONE1(i+1)    = LPHONE1(i);

      LACCURACY(i+1)  = visualvalue( LACCURACY     (i) ); 
      { update the array with original values in the LINTRO variable }
      origval(i+1)    = origval(i);
    enddo;
    LINTRO(i+1)     = xtype;
    LTRUEHH(i+1)    = notappl;
    LNUMBER(i+1)    = notappl;
    LSTRUCT(i+1)    = notappl;
    LHOUSEH(i+1)    = notappl;
    LNAME(i+1)      = " ";
    LADDRESS(i+1)   = " ";
    LNOTES(i+1)     = " ";
    LINTGPS(i+1)    = notappl;
    LLATITUDE(i+1)  = notappl;
    LLATPOLE(i+1)   = " ";
    LLONGITUDE(i+1) = notappl;
    LLNGPOLE(i+1)   = " ";
    LPHONE1(i+1)  = " ";

    LACCURACY(i+1)  = notappl;
    origval(i+1)    = xtype;
    nentry          = nentry + 1;       { one entry added }
  end;

  { function used to track insertion of (structure/household) }
  function disphelp( )
    errmsg( "Record=%d nentry=%d", totocc(RECORD2000), nentry );
    do i = 1 while i <= nentry
      errmsg( "i=%d Origval=%s", i, origval(i) );
    enddo;
  end;
 
{+GPS}
  { function to calculate average for latitude, longitude }
  function averageGPS();
    set trace(on);
    numeric valgps = 0, templat = 0, templon = 0, tempalt = 0, tempaccu = 0;
    for i in GPSSEC000
      // if GACCURACY < 5 & GSATELLIT > 2 then
      // for testing only !!!
      if GACCURACY < 50 then
        valgps  = valgps + 1;
        templat = templat + GLATITUDE;
        templon = templon + GLONGITUDE;
        tempaccu= tempaccu + GACCURACY;
      endif;
    enddo;
    if valgps > 0 then
      LLATITUDE  = templat / valgps;
      LLATPOLE   = GLATPOLE(1);
      LLONGITUDE = templon / valgps;
      LLNGPOLE   = GLNGPOLE(1);
      LACCURACY  = tempaccu / valgps;
    endif;
    averageGps = valgps;
  end;
{GPS+}
  function ShowListed();
    array string hhlist(300,6);
    numeric sr;
    do i = 1 while i <= maxocc(RECORD2000) & LTRUEHH(i) <> notappl
      hhlist(i,1) = edit("999", visualvalue(LNUMBER(i)) ); // seq. number
      hhlist(i,2) = edit("999", visualvalue(LSTRUCT(i)) ); // structure
      hhlist(i,3) = edit("999", visualvalue(LHOUSEH(i)) ); // hh in struct
      hhlist(i,4) = getlabel(LTRUEHH, visualvalue(LTRUEHH(i)) ); // is hh
      hhlist(i,5) = LNAME(i);
      hhlist(i,6) = LADDRESS(i);
    enddo;
    i= i-1;
    showarray( tr("Households listed"), hhlist, i,
        title( tr("Seq.No"), tr("Structure"), tr("HH in Struct"), tr("Is HH"), tr("Name of Head")));
  end;
  
  function string check_alpha (string alpharesp);
    string alphalst = "- ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    { Check that response is alphabetic}
    check_alpha = "";
    do numeric chr = 1 until chr > length(alpharesp)
      if !pos(alpharesp[chr:1], alphalst) then
        check_alpha = alpharesp[chr:1];
        break;
      endif;
    enddo;
  end;

PROC HHLISTING_FF
preproc
  if debug then
    // errmsg(  "WARNING: DEBUG MODE ENABLED!" );
    trace(on, ".\debug.app", clear);
//  trace(on);
    set trace;
  endif;
  { get language from commonstore or from calling menu }
  // setlanguage( loadsetting("Language", GetLanguage()) );
  android = ( getos() = 20 ); 
  xcluster = tonumber( sysparm()[1:4] );
  xintnum  = tonumber( sysparm()[5:4] );


  setfont( ValueSets, "Arial", 18, bold );

  { load sample design }
  YCLUSTER = xcluster;
  if !loadcase( CLUSTERS, YCLUSTER ) then
    errmsg( 60000, YCLUSTER );
    stop(1)
  endif;


  { set up minimal user bar }
  userbase();
  userbar( show );
  
postproc
  stop(1);

PROC HHLISTING_QUEST
  stop(1);

PROC LCLUSTER
preproc
  $ = xcluster;
  LSTATE    = YSTATEN;
  LREGION   = YREGIONN;
  LDISTRICT = YDISTRICTN;
  LCITY     = YCITYN;
  LSEGHH    = YTOTHH;
  SCLUSTER  = xcluster;
  LSEGNUM   = 0;         { no segmentation by default }
  if loadcase( SEGMENT_DCT, SCLUSTER ) & !SSEGHH in 0,notappl then
    LSEGNUM = SSEGNUM;
    LSEGHH  = SSEGHH;
    LTOTHH  = STOTHH;
  endif;
  if visualvalue(LDATEFIN) = notappl then
    LDATEFIN = 0
  endif;
  if demode() = add then
    LINTNUM = xintnum;
  endif;
postproc

PROC LAUXILIAR
  if $ = 9 then
    stop(1);
  endif;

  nentry = totocc( RECORD2000 );
  if nentry & !LINTRO(nentry) in "8","9"," " then
    LINTRO(nentry) = "8";
  endif;
  { initialize array of original values to check operations to be allowed }
  do i = 1 while i <= 500
    if i <= nentry then
      origval(i) = LINTRO(i);
    else
      origval(i) = " "
    endif;
  enddo;
{ disphelp(); }
  if $ in 1,2 & LDATEFIN <> 0 then
    x = accept(tr("Household listing for cluster was already closed. Do you want to continue?"), tr("Yes"), tr("No") );
	if x = 2 then
      reenter
    endif;
  endif;
  if $ = 1 then                          { add a new household }
    if LDATE = notappl then
      LDATE     = sysdate( "YYYYMMDD" );   { date when listing for cluster started for the first time }
    endif;
    advance to LINTRO(nentry);
  elseif $ = 9 & nentry = 0 then         { exit household listing }
    stop(-1)
  elseif $ = 9 then
    advance to LINTRO(nentry);
  endif;

PROC LINTRO
preproc
  n = totocc( RECORD2000);
  j = curocc();
  if LAUXILIAR = 1 &
     ( curocc() = n & origval(j) = "9" | LAUXILIAR = 1 & curocc() = 1  )then
    $ = edit("9",LAUXILIAR);
    noinput
  endif;
  if j % 5 = 0  & LAUXILIAR = 1 then  { partial save every 5 occurrences when adding households }
    savepartial();
  endif;

onfocus
  // get values of structure/hh/sequential number for qsf display
  weipc =  maketext("EDSIII: %04d / %03d/ %02d", LCLUSTER, visualvalue(LSTRUCT), visualvalue(LHOUSEH));
  wocc = curocc();

  if rowto = curocc() then  // reset rowto variable 
    rowto = 0;
  endif;
  modvs = LINTRO_VS1;
  if LAUXILIAR = 1 then
	modvs.remove("3");
	modvs.remove("4");
	modvs.remove("5");
    setvalueset( $, modvs );
  else
	modvs.remove("1");
	modvs.remove("2");
        modvs.add(tr("Move to a specific household"), "0");
        modvs.add(tr("Move to next household"), "1");
        modvs.add(tr("Move to previous household"), "2");
	modvs.remove("9");
        modvs.sort(by code);
    setvalueset( $, modvs );
  endif;
killfocus
  trace("rowto=%d", rowto);
  if rowto = curocc() then  // reset rowto variable 
    rowto = 0;
  endif;
  if LAUXILIAR = 2 then // move up or down !!!
    if rowto then
      // do nothing 
    else
      if $ = "1" & curocc() < nentry-1 then
        advance to $(curocc()+1)
      elseif $ = "2" & curocc() > 1 then
        reenter $(curocc()-1)
      elseif $ = "0" then
        rowto = ph_array();
        if rowto > curocc() then
          $ = "1";
          advance to $(rowto)
        elseif rowto then
          $ = "2";
          reenter $(rowto)
        else
          reenter;
        endif;
      // else
      //   reenter; // stay in same field if can't move up or down !!!
      endif;
    endif;
  endif;
postproc
  j = curocc();
  if !pos( $, "01234589" ) then
    errmsg( 60001 );
    reenter;
  elseif LAUXILIAR in 1 & origval(j) <> $ & !pos($,"1289" ) then
    errmsg( 60002 );
    $ = origval(j);
    reenter;
  elseif LAUXILIAR in 2 & origval(j) <> $ & !pos($,"0123458" ) then
    errmsg( 60003 );
    $ = origval(j);
    reenter;
  elseif LAUXILIAR = 1 & curocc() = 1 & !$ in "1","8" then
    errmsg( 60005 );
    reenter
  elseif LAUXILIAR = 2 & origval(j) <> $ & !$ in "0":"5","8" then
    errmsg( 60015 );
    $ = origval(j);
    reenter
  elseif LAUXILIAR = 1 & curocc() <> n & origval(j) <> " " & origval(j) <> $ then
    errmsg( 60010 );
    $ = origval(j);
    reenter
//+  elseif LAUXILIAR <> 2 & $ = "8" & curocc() < nentry then
  elseif $ = "8" & curocc() < nentry then
    rowto = 0;
    $ = origval(j);           { restore to it's original value after code 8 was chosen }
    advance to LINTRO(nentry);
//+  elseif LAUXILIAR <> 2 & $ = "8" then
  elseif $ = "8" then
    { no more households listed at this time }
    rowto = 0;
    endlevel;
//+  elseif LAUXILIAR <> 2 & $ = "9" then
  elseif $ = "9" then
    if !special(LSEGHH) then     //+ Expected HHs not available 
      { check total households according to clusters file }
      pct30 = int( LSEGHH * 0.30 );
      if !curocc() - 1 in LSEGHH-pct30:LSEGHH+pct30 then
        errmsg( 60035, LSEGHH, curocc()-1 );
      endif;
	endif;
    LDATEFIN  = sysdate( "YYYYMMDD" );   { date when listing for cluster was completed }
    errmsg( 60070 );
    endlevel;
  endif;
  if curocc() = nentry & origval(j) = "8" then
    origval(j) = $;
  endif;
  if $ = "3" then              { delete current occurrence }
    if origval(j) = "9" | visualvalue( LSTRUCT(j) ) = notappl then
      errmsg( 60027 );
      reenter
    else
      rowto = 0;
      x = accept(tr("Are you sure you want to delete?"), tr("Yes"), tr("No"));
      if x = 1 then	  
        oldhhnum  = visualvalue( LNUMBER(j) );
        oldstruct = visualvalue( LSTRUCT(j) );
        oldhhinst = visualvalue( LHOUSEH(j) );
        deletentry( j, origval(j) );
        errmsg( 60028, oldhhnum, oldstruct, oldhhinst );
{       disphelp(); }
        reenter LAUXILIAR; // !!! go back to prompt menu 
	  else
	    reenter;
	  endif;
    endif;
  elseif $ in "4","5" then        { insert a structure/hosuehold }
    if visualvalue( LSTRUCT(j) ) = notappl then
      errmsg( 60026 );
      reenter
    elseif curocc() = 1 & $ = "5" then
      errmsg( 60024 );
      $ = origval(j);           { restore to it's original value after inserting entries }
      reenter
    elseif curocc() <> 1 & $ = "4" & visualvalue( LSTRUCT(j) ) = LSTRUCT(j-1) then
      errmsg( 60025 );
      $ = origval(j);           { restore to it's original value after inserting entries }
      reenter
    else
      // reset value of LAUXILIAR since we are now resumning entry
      LAUXILIAR = 1;
      rowto = 0;
      type = "1";
      if $ = "5" then type = "2" endif;
      $ = origval(j);           { restore to it's original value after inserting entries }
      insertentry( j, type );
{     disphelp(); }
      advance to LTRUEHH;
    endif;
  endif;


PROC LADDRESS
preproc
  n = curocc();
  string oldval;
  numeric samestruct = ( n > 1 & LINTRO = "2");
  if samestruct & length( strip($) ) = 0 then
    $ = $(n-1)
  endif;

  if samestruct then // !! don't allow changes to address if pulled from previous hh
    oldval = $;
    noinput;
  endif;

postproc
  if length( strip($) )  < 3 then
    errmsg( 60030 );
    reenter;
  elseif samestruct & $ <> oldval then
    errmsg( 60037 );
    $ = oldval;
    reenter;
  endif;

PROC LSTRUCTT
preproc
  n = curocc(); // autofill if multiple
  if n > 1 & LINTRO = "2" then
    $ = $(n-1);
    noinput;
  endif;

PROC LSTYPE
preproc 
  ask if LSTRUCTT = 1;
  n = curocc(); // autofill if multiple
  if n > 1 & LINTRO = "2" then
    $ = $(n-1);
    noinput;
  endif;
PROC LINFRAS
preproc
  ask if LSTRUCTT = 3;

PROC LINTGPS
preproc
  if LSTRUCTT = 2 then
    skip to LTRUEHH
  endif;	
onfocus

  modGPSvs = LINTGPS_VS1;
  // remove the 1st value if is 1st line or is a structure
  if LINTRO = "1" | curocc() = 1 then
    modGPSvs.remove(1);
  endif;
  // remove option to retake if already have co-ordinates
  if LLATITUDE & LLONGITUDE then
    modGPSvs.remove(9);
  endif;
  modGPSvs.sort(by code);
  setvalueset( $, modGPSvs );
  if LINTRO = "2" & curocc () > 1 then   // set accuracy of previous measurement for display if multiple households !!
    waccuracy = LACCURACY(curocc()-1);
  endif;
  
  
postproc
  n = curocc();
  { consistency rules }
  if $ = 1 & n = 1 then   // can't copy coordinates for the first household
    errmsg( 60040 );
    reenter
  elseif $ = 1 & LLATITUDE(n-1) in 0,notappl then  // can't copy coordinates if they don't exist for the previous HH
    errmsg( 60041 );
    reenter
  elseif $ = 9 & visualvalue( LLATITUDE(n) ) = notappl then   // can't replace HH corordinates if they don't exist
    errmsg( 60043 );
    reenter
  endif;
  { take GPS even after the household has already collected them }
  if $ = 9 then
    enter GPS_FF;
    if !averageGPS() then
      errmsg( 60044 );
      reenter;
    else
      errmsg(60058, visualvalue(LLATITUDE), LLATPOLE, visualvalue(LLONGITUDE),LLNGPOLE );
    endif;
  { advance if coordinates have already been collected }
  elseif visualvalue( LLATITUDE(n) ) <> notappl then
    advance to LTRUEHH
  { get ccordinates from previous household }
  elseif $ = 1 then
    LLATITUDE  = LLATITUDE(n-1);
    LLATPOLE   = LLATPOLE(n-1);
    LLONGITUDE = LLONGITUDE(n-1);
    LLNGPOLE   = LLNGPOLE(n-1);
  { capture coordinates from GPS unit }
  elseif $ = 2 then
    enter GPS_FF;
    if !averageGPS() then
      errmsg( 60044 );
      reenter;
    else
      errmsg(60058, visualvalue(LLATITUDE), LLATPOLE, visualvalue(LLONGITUDE),LLNGPOLE );
    endif;
  else
    skip to LTRUEHH
  endif;

PROC LTRUEHH
preproc
   if LSTRUCTT <> 1 then
     $ = 2;
     noinput;
   endif;
postproc
  if $ <> 1 then
    skip to LSTRUCT
  endif;

PROC LNAME2
preproc
  if LTRUEHH <> 1 then
    skip to LNOTES
  endif;


postproc
  if length( strip($) )  < 3 then
    errmsg( 60031 );
    reenter;
  elseif length(check_alpha($)) then
    errmsg( 89991, check_alpha($) );
    reenter;
  endif;

PROC LNAME1
  if length( strip($) )  < 3 then
    errmsg( 60031 );
    reenter;
  elseif length(check_alpha($)) then
    errmsg( 89991, check_alpha($) );
    reenter;
  endif;


PROC LNUMBER
preproc
  j = 0;
  do i = 1 while i <= curocc()
    if LTRUEHH(i) = 1 then
      j = j + 1;
      $ = j;
    else
      $ = notappl;
    endif;
  enddo;

PROC LSTRUCT
preproc

  n = curocc();
  if curocc() = 1 & LINTRO = "1" then
    $ = 1;
  elseif LINTRO = "1" then
    $ = $(n-1) + 1;
  else
    $ = $(n-1);
  endif;
  LSELECT = 0;                          { set the household as not been selected yet }

PROC LHOUSEH
preproc
  n = curocc();
  if LINTRO = "1" then
    $ = 1;
  else
    $ = $(n-1) + 1;
  endif;
onfocus
weipc =  maketext("EDSIII: %04d / %03d/ %02d", LCLUSTER, LSTRUCT, visualvalue($));

PROC LPHONE1
preproc
  if LTRUEHH <> 1 then
    skip to LNOTES;
  endif;

postproc
  if length(strip($)) & !regexmatch($, "(0[4-6]|22)[0-9]{7}") then
    errmsg( 60080 );
    reenter;
  endif;
	

PROC LNOTES
postproc
  if android then
    // setocclabel(RECORD2_ROSTER(curocc()),maketext("%s %s %d/%d", strip( LADDRESS ), strip( LNAME ), LNUMBER, LSTRUCT));
    setocclabel(RECORD2000(curocc()),maketext("[%03d-%02d] %s: %s ", LSTRUCT, LHOUSEH, strip( LNAME ), strip( LADDRESS )));
  endif;



PROC GPSSEC_FORM
preproc
  GCLUSTER   = LCLUSTER;
  { open the GPS dongle to capture GPS coordinates }
  { !!! verify using the device manager the port number used by the dongle       }
  {     in ICF laptops port 3 is reserved and erroneously taken as a dongle port }
  {     in ASUS tablets ports are assigned starting from port 3 and above        }
  if getOS() = 20 then // Android
    i = GPS(open);
  else                // Windows
    do i = 3 while i <= 10
      if GPS( open, i, 4800 ) then
        break
      endif;
    enddo;
  endif;
  if !i | i > 10 then
    errmsg( 60045 );
    endsect;
  else
    {chek if coordinates previously taken and delete record if that is the case }
    if loadcase( GPS_DCT, GCLUSTER ) then
      delcase( GPS_DCT );
    endif;
    clear( GPS_DCT );
    GCLUSTER   = LCLUSTER;
  endif;

postproc
  writecase( GPS_DCT );
  close( GPS_DCT );
  gps( close );

PROC GCOLUMN
preproc
  $ = curocc();

PROC GINTRO
  if $ <> 1 then
    endsect
  endif;

PROC GLATITUDE
preproc
  gpstitle = tr("GPS device acquiring GPS satellites..., Please wait for 10 seconds to complete the capture");
  if gps(read, 25, gpstitle ) then
    GLATITUDE  = gps( latitude );
    GLATPOLE   = "N";
    if gps( latitude ) < 0 then	{ negative = south }
      GLATPOLE = "S";
    endif;
    GLONGITUDE = gps( longitude );
    GLNGPOLE  = "E";
    if gps( longitude ) < 0 then	{ negative = west }
      GLNGPOLE = "W";
    endif;
    GSATELLIT = gps( satellites );	  { no. of satellites, at least 3-4 is recommended }
    GACCURACY = low(50,gps( accuracy ));	    { precision level, 1 is the best possible and 50 the least accurate }
  else
    errmsg( 60052 );
    reenter GINTRO;
  endif;
{GPS+}
