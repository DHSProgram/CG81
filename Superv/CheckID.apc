PROC GLOBAL
{ CKID program master version - 1.0.0 of 4/06/2021 }

  FILE   fname;                        { write file with or without errors }
  FILE   ReadMSG;                      { file used to read the error messages }
  numeric debug =    1;// sets debugging on


  string blanks;
  string yresult, zcluster;
  string textsex;                      { textual sex for individual questionnaire }
  string measure;                      { biomarkers complete (Y/N) }
  string xstring;                      { to print addresses and names }
  string FileHH, FileIN;               { strings to get the files for households and women }
  string AlphaMSG;                     { string used to read error messages }
  string xbiom, xhw, xanem, xhiv;
  string pictures, final;
  string FnameIN;
  string YesNo;

  array transHIV(200);                 { array to know barcodes in the transmittal that are not in questionnaires for HIV }
  array transMAL(200);                 { array to know barcodes in the transmittal that are not in questionnaires for MALARIA }

  string transname;                    { transmittal sheet file names }
  array string barcodeHIV(200);         { stores barcodes for HIV }
  array string barcodeMAL(200);         { stores barcodes for MALARIA or other biomarker }

  array arrayhh(200);                    { to check that all individuals are linked to households }
  array arraywm(200);

  array string sumreport(50,10);         { array for summary report}
  numeric sumidx = 0;

  array xind (2,4);                     { !!! table to keep track of individual interviews for the summmary report }
  
  list string MessageAvail;              { to load the error messages depending on laguage used }
  list string ListErrmsg;                { to keep track of error messages }

  list rmlines;                          { keep track of children eligible for remeasurement }
  list rmres;

  numeric found, ycluster, fwrt, e, hhe, bioe, wme, casepart, x, i, j;
  numeric xht, xhc, xhi, xit, xic, xii, xwc, xwi, xmc, xmi, chbio, wmbio, mnbio, casefound, centoff;
  numeric hogregis, chktot, rwrthha, xlen, siblings, hhOK, newhh, bioexist;
  numeric tbcodeshiv, tbcodesmal, ors, ipos, calbeg, methuse;
  numeric status;
  numeric closing;
  numeric ForInt; // flag to show if run for interviewer or supervisor
  numeric biomselect;

  { create a file to know if cluster has structural errors }
  function FileReturn( errors )
    setfile( fname, ".\Errors.txt", create );
    if errors then
      FileWrite( fname, "WITH ERRORS" )
    else
      FileWrite( fname, "NO ERRORS" )
    endif;
  end;

  { function used to load messages according to the language used by the application }
  { massages are stored in string list MessageAvail and used later by function       }
  { GetMessage to retrieve the actual message                                        }
  function LoadMSG()
    numeric k, l, langfound = 0, endlang = 0;
        string ylang;
    open( ReadMSG );
    while FileRead( ReadMSG, AlphaMSG ) & !endlang do
      if length(AlphaMSG) then
            if pos("LANGUAGE", toupper(AlphaMSG)) = 1 then
          do k = 1 while AlphaMSG[k:1] <> "=" enddo;
          do k = k+1 while AlphaMSG[k:1] = " " enddo;
          l = length(AlphaMSG);
                  ylang = AlphaMSG[k:l-k+1];
          if toupper(ylang) = toupper(getlanguage()) then
                    langfound = 1;
//                      errmsg("Encontro %s", ylang );
            while FileRead( ReadMSG, AlphaMSG ) & !endlang do
//            errmsg( "Message 1=%s", AlphaMSG );
              if length(AlphaMSG) then
                    if pos("LANGUAGE", toupper(AlphaMSG)) = 1 then
                  endlang = 1;
                            else
                  do k = 1 while AlphaMSG[k:1] = " " enddo;
                                  if AlphaMSG[k:1] in "0":"9" then
//                  errmsg( "Message 2=%s", AlphaMSG );
                    MessageAvail.add( AlphaMSG )
                                  endif;
                            endif;
                          endif;
            enddo;
          endif;  
        endif;
      endif;
    enddo;
        LoadMSG = langfound;
  end;

  { function to go over string list MessageAvail to retrieve errors numbers passed by the application.   }
  { Once a message is found, ListErrMsg stores all messages identified in the run and display them later }
  function GetMessage( error )
    numeric errorno, k, l, n, errfound = 0;
    do n = 1 while n <= MessageAvail.length() 
          AlphaMSG = MessageAvail(n);
      do k = 1   while AlphaMSG[k:1] =  " " enddo;
      do l = k+1 while AlphaMSG[l:1] <> " " enddo;
      errorno = tonumber( AlphaMSG[k:l-k] );
      if errorno = error then
        errfound = 1;
        break;
      endif;
    enddo;
    if !errfound then
          e = errmsg( 50001, error );
    endif;
    close( ReadMSG );
    GetMessage = errorno;
  end;

  function isComplete ();
    isComplete = (QQTYPE = 1 & QM819H <> notappl) | (QQTYPE = 2 & Q1116H <> notappl);
  end;

  function string getclust ();
    // display list of all clusters available in final
    string cfname;
    list string filelist;
    dirlist(filelist, final, "H????.dat");
    array string showfiles (100, 1);
    numeric ctr, cidx;
    cidx = 0;
    do ctr = 1 until ctr > filelist.length();
      if !FileEmpty(filelist(ctr)) then
        inc(cidx);
        cfname = path.GetFileName(filelist(ctr));
        showfiles(cidx,1) = cfname[2:4];
      endif;
    enddo;
    x = showarray(showfiles, title(tr("Select Cluster for preparation of vaccination picture files")));
    getclust = showfiles(x,1);
  end;

  function resizepics (string wclust);
    // resize picture files to make them smaller 
    list string ListFiles;
    image vaccpic;
    DirList( ListFiles, pictures, "P" + wclust + "*.jpg");
    if !closing & !length(ListFiles) then
      errmsg("Vaccination pictures not found or none available for upload");
      exit;
    endif;
    // loop through files
    do i = 1 while i <= length(ListFiles)  
      // resample to 800x600
      vaccpic.load(ListFiles(i));
      vaccpic.resample(width := 800, height := 600); 
      // save files with tn prefix
      vaccpic.save(pictures + "\tn" + path.GetFileName( ListFiles(i) ));
    enddo;
    // zip files 
    compress(final + "\tnP"     + wclust + ".zip", pictures + "\tnP" + wclust + "*.jpg");   { pictures files for vaccinations }
    if !closing then
      errmsg("Vaccination pictures zipped for cluster %s", wclust);
    endif;
  end;

  function women_recs ();
    // generates error message with label of each missing record for women
    list string MisRec;
    
    if soccurs(QWSEC01) <> 1  then MisRec.add(getlabel(QWSEC01)) ;endif;
    if soccurs(QWSEC07) <> 1  then MisRec.add(getlabel(QWSEC07)) ;endif;
    if soccurs(QWSEC10) <> 1  then MisRec.add(getlabel(QWSEC10)) ;endif;
    if soccurs(QWSEC09) <> 1  then MisRec.add(getlabel(QWSEC09)) ;endif;
    
    if Q111 in 15:49 then
      if soccurs(QWSEC2A) <> 1  then MisRec.add(getlabel(QWSEC2A)) ;endif;
      if soccurs(QWSEC2Y) <> 1  then MisRec.add(getlabel(QWSEC2Y)) ;endif;
      if soccurs(QWSEC2D) <> 1  then MisRec.add(getlabel(QWSEC2D)) ;endif;
      if soccurs(QWSEC3A) <> 1  then MisRec.add(getlabel(QWSEC3A)) ;endif;
      if soccurs(QWSEC3B) <> 1  then MisRec.add(getlabel(QWSEC3B)) ;endif;
      if soccurs(QWSEC6B) <> 1  then MisRec.add(getlabel(QWSEC6B)) ;endif;
      if soccurs(QWSEC08) <> 1  then MisRec.add(getlabel(QWSEC08)) ;endif;
      if soccurs(QWSEC11) <> 1  then MisRec.add(getlabel(QWSEC11)) ;endif;
      if soccurs(QWSECM2) <> 1  then MisRec.add(getlabel(QWSECM2)) ;endif;
    endif;
    do numeric r = 1 until r > MisRec.Length()
      getmessage( 50203);
      wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, strip(textsex), QLINE, MisRec(r)) );
    enddo;
  end;
  function men_recs ();
    // generates error message with label of each missing record for men
    list string MisRec;

    if soccurs(QMSEC01) <> 1  then MisRec.add(getlabel(QMSEC01)) ;endif;
    if soccurs(QMSEC02) <> 1  then MisRec.add(getlabel(QMSEC02)) ;endif;
    if soccurs(QMSEC3A) <> 1  then MisRec.add(getlabel(QMSEC3A)) ;endif;
    if soccurs(QMSEC3B) <> 1  then MisRec.add(getlabel(QMSEC3B)) ;endif;
    if soccurs(QMSEC04) <> 1  then MisRec.add(getlabel(QMSEC04)) ;endif;
    if soccurs(QMSEC05) <> 1  then MisRec.add(getlabel(QMSEC05)) ;endif;
    if soccurs(QMSEC06) <> 1  then MisRec.add(getlabel(QMSEC06)) ;endif;
    if soccurs(QMSEC07) <> 1  then MisRec.add(getlabel(QMSEC07)) ;endif;
    if soccurs(QMSEC08) <> 1  then MisRec.add(getlabel(QMSEC08)) ;endif;
    do numeric r = 1 until r > MisRec.Length()
      getmessage( 50203);
      wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, strip(textsex), QLINE, MisRec(r)) );
    enddo;
  end;

  function string HTML_Button (string str_CallBack, string str_Text);
    // if str_callback = "Return_Case_ID('')" then
      HTML_Button = maketext('<button onclick="%s">%s</button>', encode(str_CallBack), str_Text);
    // endif;
  end;

  function string ShowStatus ( statusflag );
    if statusflag = 1 then
      ShowStatus = utf_tick_icon;
    else
      ShowStatus = utf_x_icon;;
    endif;
  end;
  function PrintBio (pline, string pstring, string presult, pstatus, remeas = notappl);
    CellValues(1) = "BLANK";
    CellValues(2) = "BLANK";
    CellValues(3) = edit("99", pline);
    CellValues(4) = "BLANK";
    CellValues(5) = pstring[1:30];
    CellValues(6) = presult;
    CellValues(7) = "BLANK";
    when remeas;
      notappl -> CellValues(8) = "BLANK";
            0 -> CellValues(8) = utf_x_icon;
            1 -> CellValues(8) = utf_tick_icon;
            9 -> CellValues(8) = "!";
    endwhen;
    CellValues(9) = ShowStatus(pstatus);
    HTML_OneRow (CellValues, 9 );   // generates the HTML script for a row with relevant household data
  end;

PROC FL_CNULL
preproc
  if debug then
    // errmsg(  "WARNING: DEBUG MODE ENABLED!" );
    trace(on, ".\debug.apc", clear);
//  trace(on);
    set trace;
  endif;

  ycluster = 0;
  fwrt     = 0;           { to control when to update control file }
  rwrthha  = 0;           { to control when to update household assignment file }
  centoff  = 0;           { set to 1 when running at the central office }

  newhh    = 0;           { households added }
  xht      = 0;           { households }
  xhc      = 0;
  xhi      = 0;
  xit      = 0;           { individuals }
  xic      = 0;
  xwc      = 0;
  xMc      = 0;
  xii      = 0;
  xwi      = 0;
  xmi      = 0;
  e        = 0;           { control for errors in all households }
  calbeg = cmcode(1, 2020);   { !!! modify according to year the calendar begins in survey  }
  yesno = tr("NY");

  zcluster = sysparm()[1:4];                { cluster number }
  chktot   = tonumber( sysparm()[5:1] );    { if checking totals }
  pictures = sysparm("Pictures");
  final    = sysparm("Final");
  closing  = ( sysparm("Closing") = "Y" );
  ForInt  = tonumber( sysparm("ForInt"));
  

  FnameIN = FileName(CGIN80);

 
  // !!! run resize picture logic here based on presence of pictures parameter
  if length(strip(pictures)) then
    if closing then // zip pictures for current cluster if closing the cluster
      resizepics(zcluster);
    else   // otherwise show repeating list of closed clusters for resizing
      zcluster = getclust();
      while length(strip(zcluster)) do
        resizepics(zcluster);
        zcluster = getclust();
      enddo;
      // !!! quit when done if just resizing pictues 
      stop(1);
    endif;
  endif;

  SetLanguage( GetLanguage() );

  { set files to read error messages (MGF) and to report errors (ERR) }
  setfile( ReadMsg,  "..\Superv\CheckID.mgf" );
  MessageAvail.clear();                     { clear list of messages available for the run }
  if !LoadMSG() then
    errmsg( 50000 );
        stop(1);
  endif;
  ListErrmsg.clear();                       { clear the array of error messages }

  { initialize arrays to check that all women are linked to a household }
  do i = 1 while i <= 200
    arrayhh(i) = 0;
    arraywm(i) = 0;
  enddo;

  { Get and set household and women file names }
  FileHH = filename( CGHH80 );
  FileIN = filename( CGIN80 );

  { set the name for the HTML file }
  HTML_InitAlign();
  HTMLname = "CheckID.html";
  if FileExist( HTMLname ) then
    FileDelete( HTMLname )
  endif;
  setfile( HTMLFile, HTMLname, create );

  { initialize the report headings }
  zstring1 = MakeText( tr("Status for cluster: %s"), zcluster );
  CellValues(1) = tr("HH");
  CellValues(2) = tr("Male.Sel");
  CellValues(3) = tr("Line");
  CellValues(4) = tr("Interviewer");
  CellValues(5) = tr("Name");
  CellValues(6) = tr("Result");
  CellValues(7) = tr("Visits");
  CellValues(8) = tr("Remeasure");
  CellValues(9) = tr("Status");

  { specify columns that are left aligned, strings are left aligned }
  CellAlign(1) = 4;  // column 3 is household address/name 
  CellAlign(2) = 5;  // column 4 is result of the interview
  // !! adding application specific javascript to html output
  list string js_scripts;
  js_scripts.add("../Library/checkid.js");
  HTML_Header( CellAlign, zstring1, js_scripts );  // generates a general HTML header

  { initialize transmittal sheet arrays to control duplicates }
  do j = 1 while j <= 200
    transHIV(j) = 0;
    transMAL(j) = 0;
  enddo;
  { loops over every household }
  while loadcase( CGHH80 ) do
    biomselect = (QHELIGM = 1); // !! selection for biomarkers
    status = 0;
    trace("hh=%d", QHNUMBER);
    { load files based on first case }
    if ycluster = 0 then
      HTML_BeginTable( CellValues, zstring2, 9, "Main" );  // generates the HTML table script with the column headers
     { load supervisor control to make sure that total number of cases to be collected in cluster is assigned }
          { it also checks that cluster was already selected for remeasurement and data were colleted }
      if !ForInt then
        SSAMPLE = QHCLUST;
        if !loadcase( CONTSUP, SSAMPLE ) then
          getmessage( 50041 );
          e = ListErrMsg.add( maketext(AlphaMSG, SSAMPLE) );
          FileReturn( e );
          stop(1);
        elseif !SHTOTAL then
          getmessage( 50040 );
          e = ListErrMsg.add( maketext(AlphaMSG, QHCLUST) );
            { check on remeasurement and if data collected for remeasurement }
        elseif SFLGMEAS <> 1 then
          getmessage( 50164 );
          e = ListErrMsg.add( AlphaMSG );
        else
          // check results of remeasurement and update CONTSUP file
          rmlines.clear();
          rmres.clear();
          found = 0;
              do i = 1 while i <= maxocc(SREMEAS) & SREMHH(i) <> 0
                rmlines.add(SREMLINE(i));
                RCLUSTER = SSAMPLE;
                RNUMBER  = SREMHH(i);
                R102L    = SREMLINE(i);
                if !loadcase( RMEASURE, RCLUSTER, RNUMBER, R102L ) then
                  getmessage( 50165 );
                  e = ListErrMsg.add( MakeText(AlphaMSG, RNUMBER, R102L) );
                  rmres.add(9);
                elseif R104 in 0:4 & ( R106 = notappl | R108 = notappl ) | 
                       R104 = notappl then
                  getmessage( 50166 );
                  e = ListErrMsg.add( maketext(AlphaMSG, RNUMBER, R102L)  );
                  rmres.add(0);
                else
                  rmres.add(1);
                endif;
              enddo;
        endif;
        { load HH assigned to interviewers to check interviewer assigned to collect household }
        XCLUSTER = QHCLUST;
        if !loadcase( SAMPSEL, XCLUSTER )  then
          getmessage( 50042 );
          e = ListErrMsg.add( maketext(AlphaMSG, XCLUSTER) );
          FileReturn( e );
          stop(1);
        endif;
      endif;
      ycluster  = QHCLUST;
    endif;

    chbio    = 0;   { biomarkers for children in household schedule }
    wmbio    = 0;   { biomarkers for women in household schedule }
    mnbio    = 0;   { biomarkers for men in household schedule }
    bioexist = 0;       { to count total number of eligible biomarkers }
    hhe      = 0;   { define if there are household structural errors }
    bioe     = 0;   { define if there are biomarker errors }
    casepart = partialcs( 1, QHCLUST, QHNUMBER, 0, FileHH );


    xind.clear();
    if QHRESULT <> 1 then
      yresult = GetLabel(QHRESULT, QHRESULT) + " " +  edit("(9)",QHRESULT);
      status = 1;
    elseif casepart then
      yresult = tr("Partial")+ " " +  edit("(9)",QHRESULT);
    else
      yresult = tr("Complete")+ " " +  edit("(9)",QHRESULT);
      status = 1;
    endif;
    
    //!!! process summmary report data 
    inc(sumidx);

    sumreport(sumidx,1) = edit ("9999", QHNUMBER );
    sumreport(sumidx,2) = edit ("9999", QHINTNUM );
    sumreport(sumidx,3) = "";
    sumreport(sumidx,4) = QHADDRESS;
    sumreport(sumidx,6) = yresult;
    if casepart then
      sumreport(sumidx,10) = "!";
    endif;

    xht      = xht + 1;   { total households }

    measure = " ";
    if casepart & QHRESULT = 1 then
      { no structure checked for partial cases }
      // getmessage( 50055 );
      // hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER) );
      xhi    = xhi + 1;             { partial households counted as incomplete }
    elseif QHRESULT = 1 then
      xhc    = xhc + 1;             { complete households }

      { number of records for household members }
      x = count( QHSEC01X where QHLIVES = 1 | QHSTAYED = 1);
      if x <> QHMEMBER then
        getmessage( 50050 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, x, QHMEMBER) )
      endif;

      { eligible women }
      x = count( CGHH80.QHSEC01 where QH09 > 0 & QH04 = 2 );
      if x <> QHWOMEN then
        getmessage( 50051 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, x, QHWOMEN) )
      endif;

      { eligible men }
      x = count( CGHH80.QHSEC01 where QH10 > 0 & QH04 = 1 );
      if x <> QHMEN then
        getmessage( 50052 );
        // hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, x, QHMEN) )
      endif;

      { household characteristics record }
      if soccurs( QHSEC02 ) <> 1 then
        getmessage( 50100 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QHSEC02)) )
      endif;

      { mosquito nets }
      if NAToZero(QH138) > noccurs( QHSEC03 ) then
        getmessage( 50101 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, noccurs( QHSEC03 ), NAToZero(QH138)) )
      endif;

      {social transfers !!}
      if soccurs( QHSEC03B ) <> 1 then
        getmessage( 50100 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QHSEC03B)) )
      endif;

      { household characteristics continuation record }
      if soccurs( QHSEC04 ) <> 1 then
        getmessage( 50100 );
        hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QHSEC04)) )
      endif;

    else
      xhi = xhi + 1;                 { incomplete households }
      // if soccurs(QHSEC01X)  | soccurs(QHSEC01) | soccurs(QHSEC02) | soccurs(QHSEC03) |
      //    soccurs(QHSECCD) | soccurs(QHSEC04) |soccurs(QHSEC04) |
      //    soccurs(QBSECOVER) | soccurs(QBSEC01) | soccurs(QBSEC02) | soccurs(QBSEC03) then
      //   // getmessage( 50110 );
      //   hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QHRESULT) );
      // endif;
    endif;

    { check if household was collected by the interviewer assigned to it and synchronize file }
    if !ForInt then
      found = 0;
      do i = 1 while i <= XTOTAL
        if QHNUMBER = XNUMBER(i) then
          found = 1;
          { display error just to let the supervisor know about the change }
          if QHINTNUM <> XINTCODE(i) then
            { !!! only display msg if was originally assigned already }
            if XINTCODE(i) then
              getmessage( 50225 );
              ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, XINTCODE(i), QHINTNUM) );
            endif;
            XINTCODE(i) = NaToZero( QHINTNUM );
            rwrthha     = 1;
          endif;
          { synchronize household status in HH assignment file }
          if XRESULT(i) <> QHRESULT then
            XRESULT(i) = NaToZero(QHRESULT);
            rwrthha    = 1;
          endif;
          { synchronize household address }
          if QHADDRESS <> XADDRESS(i) then
            XADDRESS(i) = QHADDRESS;
            rwrthha     = 1;
          endif;
          { synchronize name of household head in HH assignment file }
          if QHRESULT = 1 & length( strip(QHFIRSTN(1)) ) &
             !pos( strip(QHFIRSTN(1)) + " " + strip(QHLASTN(1)), XNAME(i) ) then
            XNAME(i) = strip(QHFIRSTN(1)) + " " + strip(QHLASTN(1));
            rwrthha  = 1;
          endif;
          break;
        endif;
      enddo;
      // { if household was not found it means that it was added by an interviewer }
      // { supervisor then needs to accept it as part of the sample                }
      hhOK = 1;
      if !found then // !! check is a number generate by splitting a hh and not by changing hh id !!!
        errmsg( 50400, QHNUMBER, strip( QH02(1)) ,strip( QHADDRESS ));
        getmessage( 50400 );
        ListErrMsg.add( maketext(AlphaMSG, QHNUMBER) );
        hhOK = errmsg( maketext( tr("Confirm you wish to accept split household %d %s-%s"), QHNUMBER, strip( QH02(1) ), strip( QHADDRESS ) )) select(tr("Yes"), continue, tr("No, cancel"), continue );
        if hhOK  = 1 then
          XTOTAL = XTOTAL + 1;
          i = XTOTAL;
          XNUMBER(i)  = QHNUMBER;
          XSTRUCT(i)  = QHNUMBER;
          XADDRESS(i) = QHADDRESS;
          XNAME(i)    = QH02(1);
          XMALE(i)    = QHELIGM;
          XINTCODE(i) = QHINTNUM;
          XINTDATE(i) = QHINTM*1000000 + QHINTD*10000 + QHINTY;
          XRESULT(i)  = NaToZero( QHRESULT );
          rwrthha     = 1;
          newhh = newhh + 1;
        else
          getmessage( 50401 );
          hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QHINTNUM) );
        endif;
      endif;
    endif;

    { print line for the household in the report }
    if soccurs( QHSEC01X ) then
      xstring = utf_hh_icon + " " + strip(QHFIRSTN(1)) + " " + strip(QHLASTN(1));
    else
      xstring = utf_hh_icon + " " + QHADDRESS;
    endif;

    { children/women/men biomarkers available }
    if QHELIGM = 1 then
      x = count(CGHH80.QBSEC01 where QB104 <> notappl) + 
          count(CGHH80.QBSEC02 where QB205 <> notappl) + 
          count(CGHH80.QBSEC03 where QB305 <> notappl); 
    endif;
    // bioexist = bioexist - count(CGHH80.QBSEC01 where QB106 <> notappl); // not all eligible children are measured
        { populates the elements of a row based on household information }
    CellValues(1) = edit("9999", QHNUMBER);
    CellValues(2) = yesno[(QHELIGM=1)+1:1];
    CellValues(3) = "BLANK";
    CellValues(4) = edit("9999", QHINTNUM);
    CellValues(5) = xstring[1:60];
    CellValues(6) = yresult;
    CellValues(7) = edit("9", QHVISITS);
    CellValues(8) = "BLANK";
    CellValues(9) = ShowStatus(status) + " " + HTML_Button(maketext("Return_Case_ID('%04d%04d')", QHCLUST, QHNUMBER), utf_view_icon);
    HTML_OneRow( CellValues, 9 );   // generates the HTML script for a row with relevant household data
    
    sumreport(sumidx, 7) = edit("99", bioexist) + "/" + edit("99", x);
    if bioexist > x then
      sumreport(sumidx,10) = "!";
    endif;

    { find a place in array of cases in the supervisor control file }
    if !ForInt then
      casefound = 0;
      do i = 1 while i <= 40
        if SNUMBER(i) = 0 | SNUMBER(i) = QHNUMBER then
          casefound = i;
          break;
        endif;
      enddo;
      j = casefound;
      if casefound & hhOK then   { Only use if there is a slot and if the household is accepted }
        if SNUMBER(j) = 0 then
          SNUMBER(j) = QHNUMBER;
          SINTNUM(j) = QHINTNUM;
          fwrt = 1;
        endif;

        { accept incomplete HH and flag all of them as true }
        if QHRESULT <> 1 & SACCEPTH(j) = 0 then
          SACCEPTH(j)  = QHRESULT;
          SACCEPTI(j)  = 1;
          SACCEPTF(j)  = sysdate("YYYYMMDD");
          SACCEPTHW(j) = 1;
          fwrt = 1;
        { incomplete interviews are saved as partial to come back to them in add mode }
        elseif QHRESULT = 1 & casepart then         { partial cases need to be reset, if already accepted }
          if SACCEPTH(j) | SACCEPTI(j) | SACCEPTF(j) | SACCEPTHW(j) then
            SACCEPTH(j)  = 0;
            SACCEPTI(j)  = 0;
            SACCEPTF(j)  = 0;
            SACCEPTHW(j) = 0;
            fwrt = 1;
          endif;
        else
          if !hhe & ( SACCEPTH(j) <> QHRESULT | SACCEPTH(j) = 0 ) then   { household with no errors }
            SACCEPTH(j) = QHRESULT;
            fwrt = 1;
          elseif SACCEPTH(j) & hhe then                     { an error in the household was introduced }
            getmessage( 50210 );
            hhe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER) );
            SACCEPTH(j)  = 0;
            SACCEPTI(j)  = 0;
            SACCEPTF(j)  = 0;
            SACCEPTHW(j) = 0;
            fwrt = 1;
          endif;
          { check errors on biomarkers }
          if chbio+wmbio+mnbio then
            if !bioe & !SACCEPTHW(j) then       { h/w completed & accepted for household }
              SACCEPTHW(j) = 1;
              fwrt = 1;
            elseif bioe & SACCEPTHW(j) then     { reset h/w if errors were introduced }
              SACCEPTHW(j) = 0;
              fwrt = 1;
            endif;
          elseif !SACCEPTHW(j) then             { no members eligible for h/w }
            SACCEPTHW(j) = 1;
            fwrt = 1;
          endif;
          if !hhe & !bioe & QHRESULT <> 1 & !SACCEPTF(j) then { no structural errors in an incomplete household }
            SACCEPTF(j) = sysdate("YYYYMMDD");
            fwrt = 1;
          elseif (hhe | bioe) & SACCEPTF(j) then             { structural errors introduced after being accepted }
            SACCEPTF(j) = 0;
            fwrt = 1;
          endif;
        endif;
      endif;                   { endif if slot found and HH accepted }
    endif; // !ForInt
    
      { check biomarkers }
      trace("%d,%d, %d", casepart, QHRESULT, biomselect);
      if !ispartial(CGHH80) & QHRESULT = 1 & biomselect then
        { biomarker front page questionnaire }
        chbio = count( CGHH80.QHSEC01 where QH11 <> 0 );
        bioexist = QHWOMEN + count( CGHH80.QHSEC01 where QH10 > 0 & QH04 = 1 ) + chbio;                { !!! children + women + men}
        if bioexist then measure = "Y" endif;
        if bioexist <=> soccurs( QBSECOVER ) <> 1 then
          // getmessage( 50100 );
          // bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, GetLabel(QBSECOVER)) )
        endif;
        { biomarkers for children }
        xbiom = tr("child");            
        xhw   = tr("height & weight");
        xanem = tr("anemia");
        for i in record QHSEC01 do
          if QH11 <> 0 then
            xstring = maketext("%s %s %s", utf_child_icon, utf_biom_icon, strip(QH02));
            yresult = tr("Not visited");
            status = 0;
            found = 0;
            do j = 1 while j <= soccurs( QBSEC01 ) & !found
              if QH11 = QB102(j) then
                found = 1;
                if QB104(j) = notappl | QB104(j) in 0:4 & (QB106(j) = notappl | QB108(j) = notappl) then      { height & weight }
                  bioe = getmessage( 50057 );
                  bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xhw, xbiom, QH11) );
                else
                  yresult = tr("Complete");
                  status = 1;
                endif;
              endif;
            enddo;
            if !found then             { biomarker record missing for individual }
              bioe = getmessage( 50056 );
              bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xbiom, QH11) );
              bioe = 1;
              measure = "N";
            endif;
            numeric r = rmlines.seek(QH11);
            if r then
              if rmres(r) <> 1 then // reset status flag if remeasurement not completed !!
                status = 0;
              endif;
              PrintBio(i, xstring, yresult, status, rmres(r));
            else
              PrintBio(i, xstring, yresult, status);
            endif;
            // output to report
          endif;
        enddo;

        { biomarkers for women }
        xbiom = tr("woman");
        xhw   = tr("height & weight");
        xanem = tr("anemia");
        xhiv  = tr("HIV");
        for i in record QHSEC01 do
          if QH09 <> 0 then
            xstring = maketext("%1s %1s %s", utf_woman_icon, utf_biom_icon, strip(QH02));
            yresult = tr("Not visited");
            status = 0;
            found = 0;
            do j = 1 while j <= soccurs( QBSEC02 ) & !found
              if QH09 = QB202(j) then
                found = 1;
                if QB205(j) = notappl | QB207(j) = notappl then  { height & weight }
                  bioe = getmessage( 50057 );
                  bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xhw, xbiom, QH09) );
                else
                  yresult = tr("Complete");
                  status = 1;
                endif;
              endif;
            enddo;
            if !found then             { biomarker record missing for individual }
              bioe = getmessage( 50056 );
              bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xbiom, QH09) );
              measure = "N";
            endif;
            // output to report
            PrintBio(i, xstring, yresult, status);
          endif;
        enddo;
        { biomarkers for men }
        xbiom = tr("man");
        xhw   = tr("height & weight");
        xanem = tr("anemia");
        xhiv  = tr("HIV");
        for i in record QHSEC01 do
          if QH10 <> 0 then
            found = 0;
            xstring = maketext("%1s %1s %s", utf_man_icon, utf_biom_icon, strip(QH02));
            yresult = tr("Not visited");
            status = 0;
            do j = 1 while j <= soccurs( QBSEC03 ) & !found
              if QH10 = QB302(j) then
                found = 1;
                if QB305(j) = notappl | QB307(j) = notappl then  { height & weight }
                  bioe = getmessage( 50057 );
                  bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xhw, xbiom, QH10) );
                else
                  yresult = tr("Complete");
                  status = 1;
                endif;
              endif;
            enddo;
            if !found then             { biomarker record missing for individual }
              bioe = getmessage( 50056 );
              bioe = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, xbiom, QH10) );
              measure = "N";
            endif;
            // output to report
            PrintBio(i, xstring, yresult, status);
          endif;
        enddo;
      endif; 
    if hhe | bioe then e = 1 endif;

    if QHRESULT <> 1 | casepart then next endif;  { skip women and go to next household }


    { check individual questionnaires (women/men) in the household in the loop }
    wme = 0;    { to make sure that there are no structural errors for women }
    // initialize array used to track interviews at individual level for this household
    for i in record QHSEC01 do
      status = 0;
      if QH04 = 2 then
        QLINE     = QH09;
        xstring = maketext("%1s %1s %s", utf_woman_icon, utf_qre_icon, strip(QH02));
        textsex = tr("woman");
      else
        QLINE     = QH10;
        xstring = maketext("%1s %1s %s", utf_man_icon, utf_qre_icon, strip(QH02));
        textsex = tr("man");
      endif;
      if QH09 | QH10 then
        xit = xit + 1;
        if QH10 then
          inc(xind(1,1));
        else
          inc(xind(2,1));
        endif;
        if loadcase( CGIN80, QHCLUST, QHNUMBER, QLINE ) then
          { populate array of individuals to check at the end if all of them are linked to a household }
          do j = 1 while j <= 200 & arrayhh(j)
            if arrayhh(j) = QHNUMBER & arraywm(j) = QLINE then
              getmessage( 50305 );
              wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE) );
            endif;
          enddo;
          if j <= 200 then
            arrayhh(j) = QHNUMBER;
            arraywm(j) = QLINE;
          endif;
          casepart = partialcs( 2, QCLUSTER, QNUMBER, QLINE, FileIN );
          // check time of end interview in case .sts file not present !!
          if { !casepart &  }!isComplete() then
            casepart = 1;
          endif;
          if QRESULT <> 1 then
            yresult = GetLabel(QRESULT, QRESULT) + " " +  edit("(9)",QRESULT);
            status = 1;
          elseif casepart then
            yresult = tr("Partial")+ " " +  edit("(9)",QRESULT)
          else
            yresult = tr("Complete")+ " " +  edit("(9)",QRESULT);
            status = 1;
          endif;
          { print individual line for report }
          { populates the elements of a row based on individual information }
          CellValues(1) = "BLANK";
          CellValues(2) = "BLANK";
          CellValues(3) = edit("  99", QLINE);
          CellValues(4) = edit("9999", QINTNUM);
          CellValues(5) = xstring;
          CellValues(6) = yresult;
          CellValues(7) = edit("9", QVISITS);
          CellValues(8) = "BLANK";
          CellValues(9) = ShowStatus(status) + " " + HTML_Button(maketext("Return_Case_ID('%04d%04d%02d')", QHCLUST, QHNUMBER, QLINE), utf_view_icon) ;
          HTML_OneRow( CellValues, 9 );  // generates the HTML script for a row with relevant individual data 

          if casepart & QRESULT = 1 then     { partial case, no structure checked }
            // getmessage( 50200 );
            wme  = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, strip(textsex), QLINE) );
            xii = xii + 1;               { partial case counted as incomplete }
            if QQTYPE = 1 then
              xmi = xmi + 1;
            else
              xwi = xwi + 1;
            endif;
            inc( xind(QQTYPE,3) );
            

          { check for complete women }
          elseif QRESULT = 1 & QQTYPE = 2 then
            inc( xind(QQTYPE,2) );
            xic  = xic + 1;             { complete individuals }
            xwc  = xwc + 1;             { complete individuals }

            { mandatory single records for complete women }
            women_recs();
            if Q111 in 15:49 then
              { pregnancy history }
              if soccurs(QWSEC2B) <> Q212W then
                // getmessage( 50206 );
                // todo 
                // wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC2B), Q212W) )
              endif;

              { calendar  !!! only for long version}
              if !soccurs(QWSEC2C) in 1:2 then      { !! adjust according to columns used in the calendar }
                getmessage( 50205 );
                // wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC2C), 2) )
              endif;

              { calendar }
              if !soccurs(QWSEC2C) in 1:2 then      { !! adjust according to columns used in the calendar }
                getmessage( 50205 );
                wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC2C), 2) )
              endif;

              { contraceptive use history }
              methuse = cmcode( Q313M, Q313Y );
              if Q314Y <> notappl then
                methuse = cmcode( Q314M, Q314Y );
              endif;
              if Q307N <> notappl & methuse <= calbeg & soccurs(QWSEC3C) then
                getmessage( 50204 );
                wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC3C), Q307N) )
              elseif Q307N <> notappl & methuse > calbeg & !soccurs(QWSEC3C) then
                getmessage( 50202 );
                wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, getlabel(Q307N, Q307N), soccurs(QWSEC3C) ) )
              endif;

              { pregnancy and postnatal care }
              if NAToZero(QESEC4) <> soccurs(QWSEC04) then
                getmessage( 50207 );
                wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC04), QESEC4) )
              endif;

              { immunization }
              if NAToZero(QESEC5) <> soccurs(QWSEC05) then
                getmessage( 50208 );
                wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC05), QESEC5) )
              endif;

              { child health }
              if NAtoZero(QESEC6) <> soccurs(QWSEC6A) then
                getmessage( 50209 );
                wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSEC6A), QESEC6) )
              endif;

              { maternal mortality }
              siblings = NAToZero(QMM07);
              if siblings <> soccurs(QWSECM1) | siblings <> soccurs(QWSECM3) then
                getmessage( 50216 );
                wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, siblings, soccurs(QWSECM1), soccurs(QWSECM3)) )
              endif;

             { early child development }
              if QESECECD <> soccurs(QWSECECD) then
                getmessage( 50310 );
                wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, QESECECD, soccurs(QWSECECD)) )
              endif;

              { fistula }
              if soccurs(QWSECFIS) <> 1 then
                getmessage( 50320 );
                wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, soccurs(QWSECFIS)) )
              endif;
            endif;

            { no men's records should exist in woman's questionnaire }
            if soccurs(QMSEC01) | soccurs(QMSEC02)  | soccurs(QMSEC3A) | soccurs(QMSEC3B) | 
                           soccurs(QMSEC04) | soccurs(QMSEC05)  | soccurs(QMSEC06) | soccurs(QMSEC07) | 
                           soccurs(QMSEC08) then
              // getmessage( 50230 );
              // wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE) );
            endif;

          { check for complete men }
          elseif QRESULT = 1 & QQTYPE = 1 then
            xic  = xic + 1;             { complete individuals }
            xmc  = xmc + 1;             { complete individuals }
            inc( xind(QQTYPE,2) );

            { mandatory single records for complete men }
            men_recs();

            { no women's records should exist in a man's questionnaire }
            if soccurs(QWSEC01) | soccurs(QWSEC2A)  | soccurs(QWSEC2B)  | soccurs(QWSEC2Y)  |
               soccurs(QWSEC2C) | soccurs(QWSEC2D)  | soccurs(QWSEC3A)  | soccurs(QWSEC3B)  | 
               soccurs(QWSEC3C) | soccurs(QWSEC04)  | soccurs(QWSEC05)  | soccurs(QWSEC6A)  | 
                           soccurs(QWSEC6B) | soccurs(QWSEC07)  | soccurs(QWSEC08)  | soccurs(QWSEC09)  | 
                           soccurs(QWSEC10) | soccurs(QWSEC11)  | 
                           soccurs(QWSECM1) | soccurs(QWSECM2)  | soccurs(QWSECM3)  | 
                           soccurs(QWSECECD) | 
                           soccurs(QWSECFIS) then
              // getmessage( 50231 );
              // wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE) );
            endif;


          { check for incomplete women/men }
          else
            if QQTYPE in 1,2 then
              inc( xind(QQTYPE,2) ); // qresult <> 1 is complete for purposes of summary report
            endif;
            xii  = xii + 1;             { incomplete individuals }
            if QQTYPE = 1 then
              xmi = xmi + 1;
            else
              xwi = xwi + 1;
            endif;
            { no women records should exist in an incomplete questionnaire }
            if soccurs(QWSEC01) | soccurs(QWSEC2A)  | soccurs(QWSEC2B)  | soccurs(QWSEC2Y)  |
               soccurs(QWSEC2C) | soccurs(QWSEC2D)  | soccurs(QWSEC3A)  | soccurs(QWSEC3B)  | 
               soccurs(QWSEC3C) | soccurs(QWSEC04)  | soccurs(QWSEC05)  | soccurs(QWSEC6A)  | 
                           soccurs(QWSEC6B) | soccurs(QWSEC07)  | soccurs(QWSEC08)  | soccurs(QWSEC09)  | 
                           soccurs(QWSEC10) | soccurs(QWSEC11)  | 
                           soccurs(QWSECM1) | soccurs(QWSECM2)  | soccurs(QWSECM3)  | 
                           soccurs(QWSECECD) | 
                           soccurs(QWSECFIS) then
              // getmessage( 50231 );
              // wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE) );
            endif;

            { no men records should exist in an incomplete questionnaire }
            if soccurs(QMSEC01) | soccurs(QMSEC02) | soccurs(QMSEC3A) | soccurs(QMSEC3B) | 
                           soccurs(QMSEC04) | soccurs(QMSEC05) | soccurs(QMSEC06) | soccurs(QMSEC07) | 
                           soccurs(QMSEC08) then
              // getmessage( 50232 );
              // wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, QLINE, QRESULT, textsex) );
            endif;
          endif;
        else
          // getmessage( 50220 );
          // wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER, strip(textsex), QLINE) );
          xii  = xii + 1;
          if QH09 then
            inc( xind(2,4) );
            xwi = xwi + 1;
          else
            inc( xind(1,4) );
            xmi = xmi + 1;
          endif;
          { print line for woman that hasn't been visited }
          yresult = tr("Not visited");
          { populates the elements of a row for an individual that hasn't been visited }
          CellValues(1) = "BLANK";
          CellValues(2) = "BLANK";
          CellValues(3) = edit("  99", QLINE);
          CellValues(4) = "BLANK";
          CellValues(5) = xstring;
          CellValues(6) = yresult;
          CellValues(7) = "BLANK";
          CellValues(8) = "BLANK";
          CellValues(9) = ShowStatus(status);
          HTML_OneRow( CellValues, 9 );  // generates the HTML script for a row with relevant individual data
       endif;
      endif;
    enddo;

    { check individual status for household }
    if !ForInt then
      j = casefound;
      if casefound & hhOK then              { a slot was found for household and it was accepted }
        if !SACCEPTI(j) & !wme then        { all individuals in household with no errors }
          SACCEPTI(j) = 1;
          fwrt = 1;
        elseif SACCEPTI(j) & wme then      { an error in any of the individuals was introduced }
          // getmessage( 50211 );
          // wme = ListErrMsg.add( maketext(AlphaMSG, QHNUMBER) );
          SACCEPTI(j) = 0;
          SACCEPTF(j) = 0;
          fwrt = 1;
        endif;
        if !hhe & !wme & !bioe & !SACCEPTF(j) then   { no structural errors in all individuals belonging to household }
          SACCEPTF(j) = sysdate("YYYYMMDD");
          fwrt = 1;
        endif;
      endif;
    endif;

    if wme then e = 1 endif;
    
    // copy xind into summary report array !!!
    if xind(2,1) then
      sumreport(sumidx, 8) = maketext("%d/%d(%d)", xind(2,1),xind(2,2), xind(2,3) );
    endif;
    if xind(1,1) then
      sumreport(sumidx, 9) = maketext("%d/%d(%d)", xind(1,1),xind(1,2), xind(1,3) );
    endif;

    // checks status for household
    if xind(2,1) <> xind(2,2)  | xind(1,1) <> xind(1,2) then // not all individuals visited
      sumreport(sumidx,10) = "!";
    // elseif e then                                           // structural errors 
    //   sumreport(sumidx,10) = "!";
    elseif !pos("!", sumreport(sumidx,10)) then            // hh not partial 
      sumreport(sumidx,10) = "OK";
    endif;
  enddo;                              { end loop over all households }

  if ycluster then
        HTML_EndTable();
  endif;

  { initialize the report headings }
  HTML_Paragraph( " " );
  HTML_Paragraph( " " );
  zstring2 = MakeText( tr("Totals"), zcluster );
  CellValues(1) = tr("Questionnaire");
  CellValues(2) = tr("Total");
  CellValues(3) = tr("Complete");
  CellValues(4) = tr("Incomplete");
  CellValues(5) = tr("Response rate");
  HTML_BeginTable( CellValues, zstring2, 5, "Summary" );  // generates the HTML table script with the column headers

{ summary of the run }
  HTML_Paragraph( " " );
  HTML_Paragraph( " " );
  // households
  CellValues(1) = tr("Household");
  CellValues(2) = edit("99", xht);
  CellValues(3) = edit("99", xhc);
  CellValues(4) = edit("99", xhi);
  CellValues(5) = maketext("%3.1f%", xhc/xht * 100);
  HTML_OneRow( CellValues, 5 );  // generates the HTML script for a row with relevant individual data
  // women
  CellValues(1) = tr("Women");
  CellValues(2) = edit("99", xwc+xwi);
  CellValues(3) = edit("99", xwc);
  CellValues(4) = edit("99", xwi);
  CellValues(5) = maketext("%3.1f%", xwc/(xwc+xwi) * 100);
  HTML_OneRow( CellValues, 5 );  // generates the HTML script for a row with relevant individual data
  // men
  CellValues(1) = tr("Men");
  CellValues(2) = edit("99", xmc+xmi);
  CellValues(3) = edit("99", xmc);
  CellValues(4) = edit("99", xmi);
  CellValues(5) = maketext("%3.1f%", xmc/(xmc+xmi) * 100);
  HTML_OneRow( CellValues, 5 );  // generates the HTML script for a row with relevant individual data
  HTML_EndTable();

  // zstring2 = MakeText( tr("Household: Total=%02d Complete=%02d Incomplete=%02d Response rate: %02d%"), xht, xhc, xhi, int( (xhc/xht * 100 )+ 0.5));
  // HTML_Subtitle( zstring2, 6 );          
  // zstring2 = MakeText( tr("Women: Total=%02d Complete=%02d Incomplete=%02d Response rate: %02d%"), xwc + xwi, xwc, xwi, int( (xwc/(xwc+xwi)* 100 )+ 0.5));
  // HTML_Subtitle( zstring2, 6 );          
  // zstring2 = MakeText( tr("Men: Total=%02d Complete=%02d Incomplete=%02d Response rate: %02d%"), xmc + xmi, xmc, xmi, int( (xmc/(xmc+xmi)* 100 )+ 0.5));
  // HTML_Subtitle( zstring2, 6 );          
  // if newhh then
  //   zstring2 = MakeText( tr("Households added not originally part of the sample design %d"), newhh );
  //   HTML_Subtitle( zstring2, 6 );          
  // endif;

  if chktot then   { totals checked when collapsing all data or when closing a cluster }
    if SSAMPLE in 9981:9985 then // !! todo remove this after pretest 
      SHTOTAL = 10;
    endif;
    { check totals with supervisor control file }
    do i = 1 while i <= 40 & SINTNUM(i) by 1
    enddo;
    hogregis = i-1;
    if xht >= SHTOTAL & hogregis = xht then
      if e then
        if closing then
          getmessage( 50151 );
          e = ListErrMsg.add( maketext(AlphaMSG, xht) );
        endif;
      else
        SHCOMP   = xhc;
        SHINCOMP = xhi;
        SITOTAL  = xit;
        SICOMP   = xic;
        SIINCOMP = xii;
        SFINDATE = sysdate("YYYYMMDD");
        fwrt     = 1;
      endif;
    else
      if chktot then
        getmessage( 50150 );
        // e = ListErrMsg.add( maketext(AlphaMSG, xht, SHTOTAL, hogregis) )
      endif;
    endif;

    { go sequentially over file with individuals to check if they were marked }
    { at the time of loading eligibles in the household roster loop           }
    close( CGIN80 );
    open( CGIN80 );
    while loadcase( CGIN80 ) do
      found = 0;
      do j = 1 while j <= 200 & !found
        if arrayhh(j) = QNUMBER & arraywm(j) = QLINE then
          found = 1;
        endif;
      enddo;
      if !found then
        // getmessage( 50505 );
        // e = ListErrMsg.add( maketext(AlphaMSG, QNUMBER, QLINE, QINTNUM) );
      endif;
    enddo;
    close(CGIN80);
    
    { copy remeasure variables to HH data file }
    close( RMEASURE );
    open( RMEASURE );
    while loadcase( RMEASURE ) do
      found = 0;
      QHCLUST  = RCLUSTER;
      QHNUMBER = RNUMBER;
          if loadcase( CGHH80, QHCLUST, QHNUMBER ) then
                for j in CGHH80.QBSEC01 
                  if QHNUMBER = RNUMBER & QB102 = R102L then
                        QBRTYPE  = RTYPE;
                        QBWEIGHT = R106;
                        QBHEIGHT = R108;
                        QBLYNSTN = R109;
                        QBRDAY   = R115D;
                        QBRMONTH = R115M;
                        QBRYEAR  = R115Y;
                        QBRMEAS  = R113;
                        found    = 1;
                  endif;
                enddo;    
        if found {& !e} then
          writecase( CGHH80 );
            endif;
          endif;
        enddo;
    
  endif;            { endif to check totals }
  if closing then
    if ListErrMsg.length() then
      { heading for report with FileWrite command }
      HTML_Paragraph( " " );
      HTML_ParagraphS( tr("Status Messages") );
      do i = 1 while i <= ListErrMsg.length()
      HTML_Paragraph( ListErrMsg(i) );
      enddo;
    endif;
  endif;

  HTML_Paragraph( HTML_Button("Return_Case_ID('')", tr("OK")));

  HTML_End();

  if !ForInt then
    { rewrite supervisor control file if necessary }
    if fwrt then writecase( CONTSUP ) endif;
    close( CONTSUP );
    { rewrite household sample file if necessary }
    if rwrthha then writecase( SAMPSEL ) endif;
    close( SAMPSEL );
    { instructions to create a file to decide if cluster is completed }
    FileReturn( e );
  endif;


  // !! display form and handle requests to view questionnaires
  // set up display options
  string display_options = maketext('{ "width": %d, '
                                    '  "height": %d, '
                                                                    '  "resizable": %d }'
                                                                    , int(tonumber(getproperty("MaxDisplayWidth")) * 0.9)
                                                                    , int(tonumber(getproperty("MaxDisplayHeight")) * 0.9)
                                                                    , true);
   // loop until no qres selected by user 
   #if exists(QHCSPRO8)
   while true do 
     // show html dialog form
     string caseid = CS.UI.showDialog(path := Path.Concat(Application, HTMLName), displayOptions := @object display_options);
     caseid = replace(caseid, '"', ''); // remove quotes from string returned by HTML dialog
     // check if a valid caseid was returned if so view the case otherwise quit
     if length(caseid) = 8 then
       setfile(CGHH80, FileName(CGHH80), update);
       loadcase(CGHH80, caseid);
       ViewQre("CGHH80", "../Entry/CGHH80.fmf", "../Entry/CollectHH.qsf");
     elseif length(caseid) = 10 then
       close(CGIN80);
       setfile(CGIN80, fnameIN, update);
       if loadcase(CGIN80, caseid) then
         viewQRE("CGIN80", "../Entry/CGIN80.fmf", "../Entry/CollectIN.qsf");
       endif;
     else
       break;
     endif;
   enddo;
   #else
     view(HTMLName);
   #endif
  { totally quit application }
  stop(1);


